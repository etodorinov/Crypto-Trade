<main>
    <div class="addon-two">
        <h1>JS Back-End Exam – Crypto Trade</h1>

        <h3>1. Exam Rules:</h3>
        <ol>
            <li>You have 4 hours</li>
            <li>When you are ready, delete the node_modules folder, make sure all
                dependencies are listed in the package.json file and submit your
                archiving project.</li>
            <li>You are provided with HTML & CSS resources</li>
            <li>You may add attributes (such as class and dataset), but it is
                forbidden to change existing attributes (such as class and id)</li>
            <li>You may change "href" attributes on links and add/change the method
                and action attributes of HTML Forms.</li>
            <li>Use Express.js as a back-end framework</li>
            <li>Use MongoDB as a database with mongoose</li>
            <li>You can use whatever view engine you like (express-handlebars, EJS,
                Pug, etc.)</li>
            <li>Use bcrypt for hashing the password</li>
            <li>The application must start from the file "index.js" on port 3000</li>
            <li>It is forbidden to use React, Vue, Angular, etc. 12. Only the last
                submission will be evaluated!</li>
        </ol>

        <h3>2. Application Overview</h3>
        <p>Get acquainted with the provided HTML and CSS and create an application for the crypto trade.
            The visitors can view the Home page and All Crypto catalog with available offers. They can also register
            with an email, username, and password, allowing them to create their offers for crypto trade and buy crypto
            (if the current user is not the owner of the crypto offer). Authors can edit or delete posts at any time.
        </p>

        <h3>3. Functional Requirements</h3>

        <h5>Guest (not logged in)</h5>
        <p>Guest navigation example:</p>
        <img src="../static/images/Picture1.jpg" alt="">
        <p>The application should provide Guest (not logged in) users with the functionality to Login, Register, and
            view the Home page, All Crypto page, and the Details page.</p>
        <h5>Users (logged in)</h5>
        <p>User navigation example:</p>
        <img src="../static/images/Picture2.jpg" alt="">
        <p>The application should provide Users (logged in) with the functionality to:
        <ul>
            <li>View the Home page and all other pages with logged-in navigation</li>
            <li>View All Crypto page</li>
            <li>Create а new crypto offer [Create Offer]</li>
            <li>Access crypto details page [Details]</li>
            <li>Buy crypto (if the current user is not the owner of the offer)</li>
            <li>Delete or Edit the offer depending on the user's authentication (only for the owner of the current offer
                for crypto)</li>
        </ul>

        <h3>4. Database Models</h3>
        <p>The Database of the Crypto Trade application needs to support two entities:</p>

        <h5>User</h5>
        <ul>
            <li>Username - string (required),</li>
            <li>Email - string (required),</li>
            <li>Password - string (required)</li>
        </ul>

        <h5>Crypto</h5>
        <ul>
            <li>Name - String (required),</li>
            <li>Image: String (required),</li>
            <li>Price: Number (required),</li>
            <li>Crypto Description: String (required),</li>
            <li>Payment Method: String (crypto-wallet, credit-card, debit-card, paypal) required,</li>
            <li>Buy a crypto - a collection of Users (a reference to the User model)</li>
            <li>Owner - object Id (a reference to the User model)</li>
        </ul>
        <p>Note: When a user buys crypto, their id is added to that collection (Buy a crypto)</p>
        <p>Implement the entities with the correct data types.</p>

        <h3>5. Application Pages (80 pts)</h3>
        <h5>Home Page (For logged in users and logged-out users)</h5>
        <p>Visualize static home page.</p>
        <img src="../static/images/Picture3.jpg" alt="">



        <h5>Register Page (Logged Out User)</h5>
        <p>Register a user inside the Database with a username, email, and password. Password inside the Database must
            be hashed (use bcrypt), and both passwords must match! After successful registration, you should redirect to
            the Home page.</p>
        <img src="../static/images/Picture4.jpg" alt="">

        <h5>Login Page (Logged Out User) - (5 Pts)</h5>
        <p> Logging an already registered user with the correct email and password. After successful login, you should
            redirect to the Home page.</p>
        <img src="../static/images/Picture5.jpg" alt="">

        <h5>Logout (logged in user)</h5>
        <p> The logout action is available to logged-in users. Upon success, clear any session information and redirect
            the user to the Home page.</p>

        <h5>Crypto Catalog (For logged in users and logged out users)</h5>
        <p> List all crypto offers. Each offer must display information about the crypto image, the name, the price,
            payment, and a button for details about the specific crypto. As in the picture below:</p>
        <img src="../static/images/Picture6.jpg" alt="">
        <p>[Details] button should be a link to the details page for the current crypto.</p>
        <p>If there are NO crypto offers in the Database yet, display "There are no crypto offers found! "</p>
        <img src="../static/images/Picture7.jpg" alt="">

        <h5>Details Page - (for logged in users and logged out users)</h5>
        <p>All users should be able to see details. Clicking the Details button on the crypto card should display the
            details page. If the currently registered user is the creator of the crypto offer, the Edit and Delete
            buttons should be displayed. Otherwise, they should not be available.
            Information about the crypto:</p>
        <ul>
            <li>Name</li>
            <li>Payment method</li>
            <li>Price</li>
            <li>Description</li>
            <li>Buttons (Depending on the status of the currently logged in user)</li>
        </ul>

        <h5>Details Page (logged out users)</h5>
        <p>If there are no logged-in users, no buttons should be displayed.</p>
        <img src="../static/images/Picture8.jpg" alt="">

        <h5>Details Page (logged in user and creator of the current offer)</h5>
        <p>If the currently logged-in user is the owner (the user who created the crypto offer), he should see the
            [Delete] and [Edit] buttons.</p>
        <img src="../static/images/Picture9.jpg" alt="">

        <h5>Details Page (logged in user with available places)</h5>
        <p>If the currently logged-in user is not the owner (a user who is not the creator of this crypto offer) and has
            not bought that crypto, he should see a buy button.</p>
        <img src="../static/images/Picture10.jpg" alt="">

        <h5>Details Page (logged in user already bought crypto)</h5>
        <p>If the currently logged in user is not the owner and has already bought crypto, he should see [You have
            already
            bought this crypto].</p>
        <img src="../static/images/Picture11.jpg" alt="">

        <h5>Buy Crypto (logged in user who is not the current crypto owner)</h5>
        <p>Any registered user who is not the current owner of the crypto offer must be able to buy crypto (if any).</p>
        <p>If he manages to buy the crypto successfully, his userId must be added to the collection of Buy a crypto and
            redirect the user to the Details page for the current crypto offer.</p>
        <p>If a user has once bought current crypto, he should see " You already bought these crypto coins.".</p>

        <h5>Create Offer (Logged in User)</h5>
        <p>The Create Offer page is available to logged-in users. It contains a form for adding a new crypto offer. Upon
            success, redirect the user to the All Crypto page.</p>
        <img src="../static/images/Picture12.jpg" alt="">

        <h5>Delete Offer (logged in user and owner of the current offer)</h5>
        <p>Each owner of the crypto offer must be able to click on the [Delete] button and delete the current crypto
            from the Database, and the user must be redirected to the All Crypto page.</p>

        <h5>Edit Offer (logged in user and owner of the current offer)</h5>
        <p>Each owner can edit their crypto offer. Clicking the [Edit] button for a specific offer on the details page
            should display the Edit page, all fields being populated with crypto data. It contains a form with input
            fields for all relevant properties. If successful, redirect the user to the current crypto details page.</p>
        <img src="../static/images/Picture13.jpg" alt="">

        <h3>6. Security Requirements (Routes Guards) - (10 Pts)</h3>
        <p>The Security Requirements are mainly access requirements. Configurations about which users can access
            specific
            functionalities and pages.</p>
        <ul>
            <li>Guest (not logged in) users can access the Home page.</li>
            <li>Guest (not logged in) users can access the Login page and functionality.</li>
            <li>Guest (not logged in) users can access the Register page and functionality.</li>
            <li>Guest (not logged in) and Users (logged in) can access the All Crypto page (Listed all crypto offers).
            </li>
            <li>Guest (not logged in) can access the Details page without functionality.</li>
            <li>Users (logged in) can access the Home page.</li>
            <li>Users (logged in) can access the Details page and functionality.</li>
            <li>Users (not crypto offer owners) can buy crypto.</li>
            <li>Users (crypto offer owners) can Edit and Delete the current crypto offer</li>
            <li>Users (logged in) can access Create Offer page and functionality.</li>
            <li>Users (logged in) can access Logout functionality.</li>
        </ul>
        <p>Use the following view for invalid paths:</p>
        <img src="../static/images/Picture14.jpg" alt="">

        <h3>7. Validation and Error Handling (10 Pts)</h3>
        <p>The application should notify the users about the result of their actions.</p>
        <p>In case of error, you should display div with class "errorContainer"</p>
        <p>You can choose to display the first error or all of them. You have complete freedom to choose the content of
            the error message you will display.</p>

        <h5>Login / Register</h5>
        <p>You should make the following validations:</p>
        <ul>
            <li>The username should be at least five characters long.</li>
            <li>The email should be at least ten character long.</li>
            <li>The password should be at least four characters long.</li>
            <li>The repeat password should be equal to the password.</li>
        </ul>
        <img src="../static/images/Picture15.jpg" alt="">
        <img src="../static/images/Picture16.jpg" alt="">

        <h5>Crypto</h5>
        <p>You should make the following validations while creating or editing a crypto offer:</p>
        <ul>
            <li>The Name should be at least two characters.</li>
            <li>The Price should be a positive number.</li>
            <li>The Crypto Image should start with http:// or https://.</li>
            <li>The Description should be a minimum of 10 characters long.</li>
            <li>The Payment Method must be one of the options.</li>
        </ul>
        <img src="../static/images/Picture17.jpg" alt="">
        <img src="../static/images/Picture18.jpg" alt="">

        <h3>* Bonus – Search (10 Pts)</h3>
        <p>Search for crypto. When you enter the search page, first, you must see all the crypto offers. Filter all
            matches by name and payment method (case insensitive).</p>
        <img src="../static/images/Picture19.jpg" alt="">
        <p>After clicking on the [Search] button, and If there are any matching matches from the search, show each.</p>
        <img src="../static/images/Picture20.jpg" alt="">
        <p>If there are no search matches, display:</p>
        <img src="../static/images/Picture21.jpg" alt="">

        <h3>GOOD LUCK! 😊</h3>
    </div>
</main>