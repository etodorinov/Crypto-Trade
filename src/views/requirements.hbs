<main>
    <div class="addon-two">
        <h1>JS Back-End Exam – Crypto Trade</h1>

        <h3>1. Exam Rules:</h3>
        <ol>
            <li>You have <span>4 hours</span>.</li>
            <li>When you are ready, delete the <span>node_modules</span> folder, make sure all
                dependencies are listed in the <span>package.json</span> file and submit your
                archiving project.</li>
            <li>You are provided with <span>HTML & CSS</span> resources.</li>
            <li>You may <span>add attributes</span> (such as <span>class</span> and <span>dataset</span>), but it is
                <span>forbidden to change existing</span> attributes (such as <span>class</span> and <span>id</span>).
            </li>
            <li>You may <span>change "href"</span> attributes on links and add/change the <span>method</span>
                and <span>action</span> attributes of HTML Forms.</li>
            <li>Use <span>Express.js</span> as a back-end framework.</li>
            <li>Use <span>MongoDB</span> as a database with <span class="underlined">mongoose</span>.</li>
            <li>You can use whatever <span>view engine</span> you like (<span
                    class="underlined">express-handlebars</span>, EJS,
                Pug, etc.).</li>
            <li>Use <span class="underlined">bcrypt</span> <span>for hashing the password</span>.</li>
            <li>The application <span>must start</span> from the file <span>"index.js"</span> on port <span>3000</span>.
            </li>
            <li>It is <span>forbidden to use React, Vue, Angular</span>, etc.</li>
            <li><span class="underlined">Only the last
                    submission will be evaluated!</span></li>
        </ol>

        <h3>2. Application Overview</h3>
        <p>Get acquainted with the provided <span>HTML and CSS</span> and create an application for the <span>crypto
                trade</span>.
            The visitors can <span>view</span> the <span>Home page</span> and <span>All Crypto</span> catalog with
            available offers. They can also <span>register</span>
            with an <span>email</span>, <span>username</span>, and <span>password</span>, allowing them to create their
            offers for crypto trade and <span>buy crypto</span>
            (if the <span>current user</span> is <span>not</span> the <span>owner of the crypto offer</span>). Authors
            can edit or delete posts at any time.
        </p>

        <h3>3. Functional Requirements</h3>

        <h5>Guest (not logged in)</h5>
        <p><span>Guest</span> navigation example:</p>
        <img src="../static/images/Picture1.jpg" alt="">
        <p>The <span>application</span> should provide <span>Guest</span> (not logged in) users with the functionality
            to <span>Login</span>, <span>Register</span>, and
            <span>view</span> the <span>Home</span> page, <span>All Crypto</span> page, and the <span>Details</span>
            page.
        </p>
        <h5>Users (logged in)</h5>
        <p><span>User</span> navigation example:</p>
        <img src="../static/images/Picture2.jpg" alt="">
        <p>The <span>application</span> should provide <span>Users</span> (logged in) with the functionality to:
        <ul>
            <li><span>View the Home page and all other pages with logged-in navigation;</span></li>
            <li><span>View All Crypto page;</span></li>
            <li><span>Create а new crypto offer [Create Offer];</span></li>
            <li><span>Access crypto details page [Details];</span></li>
            <li><span>Buy crypto (if the current user is not the owner of the offer);</span></li>
            <li><span>Delete or Edit the offer depending on the user's authentication (only for the owner of the current
                    offer
                    for crypto).</span></li>
        </ul>

        <h3>4. Database Models</h3>
        <p>The <span>Database</span> of the <span>Crypto Trade</span> application needs to support <span>two
                entities</span>:</p>

        <h5>User</h5>
        <ul>
            <li><span>Username - string (required),</span></li>
            <li><span>Email - string (required),</span></li>
            <li><span>Password - string (required)</span></li>
        </ul>

        <h5>Crypto</h5>
        <ul>
            <li><span>Name - String (required),</span></li>
            <li><span>Image: String (required),</span></li>
            <li><span>Price: Number (required),</span></li>
            <li><span>Crypto Description: String (required),</span></li>
            <li><span>Payment Method: String (crypto-wallet, credit-card, debit-card, paypal) required,</span></li>
            <li><span>Buy a crypto - a collection of Users (a reference to the User model),</span></li>
            <li><span>Owner - object Id (a reference to the User model)</span></li>
        </ul>
        <p><span>Note:</span> When a user <span>buys crypto</span>, their <span>id</span> is added to that collection
            (<span>Buy a crypto</span>)</p>
        <p>Implement the entities with the <span>correct data types</span>.</p>

        <h3>5. Application Pages (80 pts)</h3>
        <h5>Home Page (For logged in users and logged-out users)</h5>
        <p>Visualize <span>static home page</span>.</p>
        <img src="../static/images/Picture3.jpg" alt="">
        <h5 class="not-initial">* Add on to initial requirements</h5>
        <p>The prices of the three coins shown on the home page are fetched in the time of the page's loading through <a
                href="https://www.npmjs.com/package/coingecko-api" target="_blank" class="coingecko">CoinGecko API.</a>
        </p>

        <h5>Register Page (Logged Out User)</h5>
        <p><span>Register</span> a user inside the Database with a <span>username</span>, <span>email</span>, and
            <span>password</span>. <span>Password</span> inside the Database must
            be <span>hashed</span> (<span>use bcrypt</span>), and both passwords <span>must match</span>! After
            successful
            registration, you should <span>redirect</span> to
            the <span>Home page</span>.
        </p>
        <img src="../static/images/Picture4.jpg" alt="">

        <h5 class="not-initial">* Add on to initial requirements</h5>
        <p>There are <span>three default</span> users with which the different functionalities may be
            <span>tested</span>:
        </p>
        <p>
        <ul>
            <li><span>username</span>: userOne</li>
            <li><span>email</span>: abv@abv.bg</li>
            <li><span>password</span>: 1234</li>
        </ul>
        </p>
        <p>
        <ul>
            <li><span>username</span>: userTwo</li>
            <li><span>email</span>: gbg@gbg.bg</li>
            <li><span>password</span>: 1234</li>
        </ul>
        </p>
        <p>
        <ul>
            <li><span>username</span>: userThree</li>
            <li><span>email</span>: abv@gbg.bg</li>
            <li><span>password</span>: 1234</li>
        </ul>
        </p>



        <h5>Login Page (Logged Out User) - (5 Pts)</h5>
        <p> Logging an already registered user with the correct <span>email</span> and <span>password</span>. After
            successful login, you should
            <span>redirect</span> to the <span>Home page</span>.
        </p>
        <img src="../static/images/Picture5.jpg" alt="">

        <h5>Logout (logged in user)</h5>
        <p> The logout action is available to <span>logged-in</span> users. Upon success, clear any session information
            and <span>redirect</span>
            the user to the <span>Home page</span>.</p>

        <h5>Crypto Catalog (For logged in users and logged out users)</h5>
        <p> List all crypto offers. Each offer must display information about the <span>crypto image</span>, the
            <span>name</span>, the <span>price</span>,
            <span>payment</span>, and a button for <span>details</span> about the <span>specific crypto</span>. As in
            the picture below:
        </p>
        <img src="../static/images/Picture6.jpg" alt="">
        <p>[<span>Details</span>] button should be a link to the <span>details page</span> for the current crypto.</p>
        <p>If there are <span class="underlined">NO</span> crypto offers in the Database yet, display <span>"There are
                no crypto offers found!"</span></p>
        <img src="../static/images/Picture7.jpg" alt="">

        <h5>Details Page - (for logged in users and logged out users)</h5>
        <p>All users should be able <span>to see details</span>. Clicking the [<span>Details</span>] button on the
            crypto
            card should display the
            <span>details page</span>. If the currently registered user <span>is the creator</span> of the crypto offer,
            the [<span>Edit</span>] and
            [<span>Delete</span>]
            buttons should be displayed. Otherwise, they should <span>not be available</span>.
        </p>
        <p>Information about the crypto:</p>
        <ul>
            <li><span>Name;</span></li>
            <li><span>Payment method;</span></li>
            <li><span>Price;</span></li>
            <li><span>Description;</span></li>
            <li><span>Buttons</span> (Depending on the status of the currently logged in user).</li>
        </ul>

        <h5>Details Page (logged out users)</h5>
        <p>If there are <span>no logged-in</span> users, <span>no buttons</span> should be displayed.</p>
        <img src="../static/images/Picture8.jpg" alt="">

        <h5>Details Page (logged in user and creator of the current offer)</h5>
        <p>If the <span>currently logged-in</span> user is the <span>owner</span> (the user who <span>created the crypto
                offer</span>), he should see the
            [<span>Edit</span>] and [<span>Delete</span>] buttons.</p>
        <img src="../static/images/Picture9.jpg" alt="">

        <h5>Details Page (logged in user with available crypto)</h5>
        <p>If the currently logged-in user is <span>not the owner</span> (a user who is not the creator of this crypto
            offer) and has
            <span>not bought</span> that crypto, he should see a [<span>Buy</span>] button.
        </p>
        <img src="../static/images/Picture10.jpg" alt="">

        <h5>Details Page (logged in user already bought crypto)</h5>
        <p>If the currently logged in user is <span>not the owner</span> and has <span>already bought crypto</span>, he
            should see [<span>You have
                already
                bought this crypto coins.</span>].</p>
        <img src="../static/images/Picture11.jpg" alt="">

        <h5>Buy Crypto (logged in user who is not the current crypto owner)</h5>
        <p>Any registered user who is <span>not</span> the current <span>owner</span> of the crypto offer must be able
            <span>to buy crypto</span> (if any).
        </p>
        <p>If he manages to <span>buy the crypto successfully</span>, his <span>userId</span> must be added to the
            collection of <span>Buy
                a crypto</span> and
            <span>redirect</span> the user to the <span>Details</span> page for the <span>current crypto offer</span>.
        </p>
        <p>If a user has once bought current crypto, he should see [<span>You have
                already
                bought this crypto coins.</span>].</p>

        <h5>Create Offer (Logged in User)</h5>
        <p>The <span>Create Offer</span> page is available to <span>logged-in users</span>. It contains a form for
            adding a new
            crypto offer. Upon
            success, <span>redirect</span> the user to the <span>All Crypto</span> page.</p>
        <img src="../static/images/Picture12.jpg" alt="">

        <h5 class="not-initial">* Add on to initial requirements</h5>
        <p>There are <span>three initial</span> coins, created by each of the users. These coins are <span>Eagle
                coin</span> created
            by userOne
            (abv@abv.bg), <span>Happy Cat coin</span> created by userTwo (gbg@gbg.bg) and <span>Pepper coin</span>
            created by userThree (abv@gbg.bg).</p>

        <h5>Delete Offer (logged in user and owner of the current offer)</h5>
        <p>Each <span>owner</span> of the crypto offer must be able to click on the [<span>Delete</span>] button and
            <span>delete the current crypto</span>
            from the Database, and the user must be redirected to the <span>All Crypto</span> page.
        </p>

        <h5 class="not-initial">* Add on to initial requirements</h5>
        <p>The initial coins <span>can not be
                removed even by their creators</span>,
            although the
            delete button is visible and functional, so there are always coins to demostrate the
            basic functionalities - catalogue, details, edit, buy and search. If an attempt to remove initial coin is
            done an appropriate message is displayed. If one wants to test the
            delete functionality one
            should create his own coin by registering a user or by using any of the default users - userOne
            (abv@abv.bg), userTwo (gbg@gbg.bg) or userThree (abv@gbg.bg).</p>
        <img src="../static/images/Picture22.jpg" alt="">


        <h5>Edit Offer (logged in user and owner of the current offer)</h5>
        <p>Each <span>owner</span> can edit their <span>crypto offer</span>. Clicking the [<span>Edit</span>] button for
            a specific
            offer on the
            details page
            should display the <span>Edit</span> page, all fields being populated with crypto data. It contains a form
            with input
            fields for all relevant properties. If successful, redirect the user to the <span>current crypto details
                page</span>.</p>
        <img src="../static/images/Picture13.jpg" alt="">

        <h3>6. Security Requirements (Routes Guards) - (10 Pts)</h3>
        <p>The <span>Security Requirements</span> are mainly <span>access</span> requirements. Configurations about
            which users can access
            specific
            functionalities and pages.</p>
        <ul>
            <li><span>Guest</span> (not logged in) users can access the <span>Home</span> page.</li>
            <li><span>Guest</span> (not logged in) users can access the <span>Login</span> page and functionality.</li>
            <li><span>Guest</span> (not logged in) users can access the <span>Register</span> page and functionality.
            </li>
            <li><span>Guest</span> (not logged in) and Users (logged in) can access the <span>All Crypto</span> page
                (Listed all
                crypto offers).
            </li>
            <li><span>Guest</span> (not logged in) can access the <span>Details</span> page without functionality.</li>
            <li><span>Users</span> (logged in) can access the <span>Home</span> page.</li>
            <li><span>Users</span> (logged in) can access the <span>Details</span> page and functionality.</li>
            <li><span>Users</span> (not crypto offer owners) <span>can buy</span> crypto.</li>
            <li><span>Users</span> (crypto offer owners) can <span>Edit</span> and <span>Delete</span> the current
                crypto offer</li>
            <li><span>Users</span> (logged in) can access <span>Create Offer</span> page and functionality.</li>
            <li><span>Users</span> (logged in) can access <span>Logout</span> functionality.</li>
        </ul>
        <p>Use the following view for <span>invalid paths</span>:</p>
        <img src="../static/images/Picture14.jpg" alt="">

        <h3>7. Validation and Error Handling (10 Pts)</h3>
        <p>The application should <span>notify</span> the users about the result of their actions.</p>
        <p>In case of error, you should display div with class "<span>errorContainer</span>"</p>
        <p>You can choose to display the first error or all of them. You have complete freedom to choose the content of
            the error message you will display.</p>

        <h5>Login / Register</h5>
        <p>You should make the following validations:</p>
        <ul>
            <li>The <span>username</span> should be <span>at least five characters long</span>;</li>
            <li>The <span>email</span> should be <span>at least ten character long</span>;</li>
            <li>The <span>password</span> should be <span>at least four characters long</span>;</li>
            <li>The <span>repeat password</span> should be <span>equal to the password</span>.</li>
        </ul>
        <img src="../static/images/Picture15.jpg" alt="">
        <img src="../static/images/Picture16.jpg" alt="">

        <h5>Crypto</h5>
        <p>You should make the following validations while <span>creating</span> or <span>editing</span> a crypto offer:
        </p>
        <ul>
            <li>The <span>Name</span> should be <span>at least two characters</span>;</li>
            <li>The <span>Price</span> should be <span>a positive number</span>;</li>
            <li>The <span>Crypto Image</span> should <span>start with http:// or https://</span>;</li>
            <li>The <span>Description</span> should be <span>a minimum of 10 characters long</span>;</li>
            <li>The <span>Payment Method</span> must be <span>one of the options</span>.</li>
        </ul>
        <img src="../static/images/Picture17.jpg" alt="">
        <img src="../static/images/Picture18.jpg" alt="">

        <h3>* Bonus – Search (10 Pts)</h3>
        <p>Search for crypto. When you enter the search page, first, you must see all the crypto offers. Filter all
            matches by name and payment method (case insensitive).</p>
        <img src="../static/images/Picture19.jpg" alt="">
        <p>After clicking on the [<span>Search</span>] button, and If there are any matching matches from the search,
            show each.</p>
        <img src="../static/images/Picture20.jpg" alt="">
        <p>If there are <span class="underlined">NO</span> search matches, display:</p>
        <img src="../static/images/Picture21.jpg" alt="">

        <h3>GOOD LUCK! 😊</h3>
    </div>
</main>